import java.io.File;
import java.io.IOException;

import com.sun.codemodel.JClass;
import com.sun.codemodel.JClassAlreadyExistsException;
import com.sun.codemodel.JCodeModel;
import com.sun.codemodel.JDefinedClass;
import com.sun.codemodel.JExpr;
import com.sun.codemodel.JFieldRef;
import com.sun.codemodel.JInvocation;
import com.sun.codemodel.JMethod;
import com.sun.codemodel.JMod;
import com.sun.codemodel.JType;



public class Test {
	public static void main(String[] args) throws JClassAlreadyExistsException, IOException, ClassNotFoundException {
		
		JCodeModel jcm = new JCodeModel();

		JType jt = jcm.parseType("dw.sample.Singleton");
		
		JDefinedClass dc = jcm._class("test.Test");
		dc.field(JMod.PRIVATE+JMod.STATIC, jt, "singleton");
		JMethod c = dc.constructor(JMod.PUBLIC);
		c.param(String.class, "constructP"); //给构造函数添加参数
		
		
		
		JFieldRef fr = JExpr.ref("singleton");
		
		JClass tt = jcm.ref("dw.sample.Singleton");
		JInvocation tt1 = tt.staticInvoke("getInstance");
		c.body().
		c.body()._if(fr.eq(JExpr._null()))._then().block().assign(fr, tt1);
		
		
		
		
		
		
		jcm.build(new File("src"));
		
	}
}
