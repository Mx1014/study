package client;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.SocketChannel;
import java.util.Iterator;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class ClientNIO {

	private Selector selector;
	SocketChannel channel;
	ByteBuffer readBuffer;
	String msg ="";
	public ClientNIO(int port,String ip) {
		try {
			channel = SocketChannel.open();
			channel.configureBlocking(false);
			selector = Selector.open();
			channel.connect(new InetSocketAddress(ip, port));
			channel.register(selector, SelectionKey.OP_CONNECT);
			readBuffer=ByteBuffer.allocate(1024);
			for(int i=0;i<100;i++){
				msg+=UUID.randomUUID().toString();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	class WriteThread implements Runnable{

		@Override
		public void run() {
			while(true){
				if(channel.isConnected()){
					
					try {
						send();
						TimeUnit.SECONDS.sleep(5);
					} catch (IOException e) {
						try {
							channel.close();
						} catch (IOException e1) {
							e1.printStackTrace();
						}
						e.printStackTrace();
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
		}

		
	}
	private void send() {
		System.out.println("send msg:"+msg);
		send(msg);
	
	}
	private void send(String msg2) {
		
	}

	class WorkThread implements Runnable{

		@Override
		public void run() {
			while(true){
				try {
					int n = selector.select(10);
					if(n<=0)
						continue;
					Set<SelectionKey> keys = selector.selectedKeys();
					Iterator<SelectionKey> iterator = keys.iterator();
					while(iterator.hasNext()){
						SelectionKey key = iterator.next();
						iterator.remove();
						
						if(key.isConnectable()){
							if(channel.isConnectionPending()){
								channel.finishConnect();
							}
							channel.configureBlocking(false);
							channel.register(selector, SelectionKey.OP_READ);
						}else if( key.isReadable() ){
							channel.read(readBuffer);
							
//							String value = "";
//							while(!buffer.hasRemaining()){
//								buffer.flip();
//								byte[] dst =new byte[buffer.limit()];
//								buffer.get(dst);
//								value+=new String(dst);
//								buffer.clear();
//								channel.read(buffer);
//							}
//							buffer.flip();
//							byte[] dst =new byte[buffer.limit()];
//							buffer.get(dst);
//							value+=new String(dst);
//							System.out.println(value);
						}
					}
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			
		
		}
		
	}
	
	
	public static void main(String[] args) {
		new ClientNIO(3333, "localhost").listen();
	}


	private void listen() {
		Executors.newCachedThreadPool().execute(new WorkThread());
		Executors.newCachedThreadPool().execute(new WriteThread());

	}

}
