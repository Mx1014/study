import java.util.Vector;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

public class MultiThread extends Thread {
	private static int MAX = 100000;

     static Vector<Integer> list = new Vector<Integer>(MAX);
     static CountDownLatch count = new CountDownLatch(10);

     public void run() {

          while (list.size() > 0) {
               try {
                    list.remove(0);
               } catch (Exception e) {
                    // 可能数组越界，这个地方只是为了说明问题，忽略错误
               }
          }
         
          count.countDown(); // 删除成功减一

     }

     public static void main(String[] args) throws InterruptedException {
         
          for (int i = 0; i < MAX; i++) {
               list.add(i);
          }
         
          long start = System.currentTimeMillis();
          for (int i = 0; i < 10; i++) {
              Executors.newCachedThreadPool().execute(new MultiThread());
          }

          count.await();
          long end = System.currentTimeMillis();
          System.out.println("消耗 " + (end - start) + " ms");

     }

     // 消耗 1001 ms
}