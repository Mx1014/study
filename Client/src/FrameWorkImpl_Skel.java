// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

public final class FrameWorkImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("java.lang.Object asyncRequest(FrameWorkParm)[]"), 
	new java.rmi.server.Operation("java.lang.String fetchThreads(java.lang.String)[]"), 
	new java.rmi.server.Operation("java.lang.String shutRequest()"), 
	new java.rmi.server.Operation("java.lang.Object syncRequest(FrameWorkParm)[]")
    };
    
    private static final long interfaceHash = -2681651692530284744L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (hash != interfaceHash)
	    throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	
	FrameWorkImpl server = (FrameWorkImpl) obj;
	switch (opnum) {
	case 0: // asyncRequest(FrameWorkParm)
	{
	    FrameWorkParm $param_FrameWorkParm_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_FrameWorkParm_1 = (FrameWorkParm) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.lang.Object[] $result = server.asyncRequest($param_FrameWorkParm_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // fetchThreads(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.lang.String[] $result = server.fetchThreads($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // shutRequest()
	{
	    call.releaseInputStream();
	    java.lang.String $result = server.shutRequest();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // syncRequest(FrameWorkParm)
	{
	    FrameWorkParm $param_FrameWorkParm_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_FrameWorkParm_1 = (FrameWorkParm) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.lang.Object[] $result = server.syncRequest($param_FrameWorkParm_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
